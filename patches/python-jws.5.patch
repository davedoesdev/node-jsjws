From 3a340f9f91201f033a49fa91c30ad6783ee2cd10 Mon Sep 17 00:00:00 2001
From: David Halls <dahalls@gmail.com>
Date: Thu, 8 Aug 2013 08:50:45 +0100
Subject: [PATCH] Add support for PS256, PS384 and PS512 algorithms (see
 http://self-issued.info/docs/draft-ietf-jose-json-web-algorithms-11.html#DefiningPSS)
 Using salt len = hash len as per
 http://www.ietf.org/mail-archive/web/jose/current/msg02901.html Tests added
 but I've not touched the README

---
 jws/algos.py | 26 ++++++++++++++++++--------
 jws/tests.py | 36 +++++++++++++++++++++++++++++-------
 2 files changed, 47 insertions(+), 15 deletions(-)

diff --git a/jws/algos.py b/jws/algos.py
index 74152ff..dae1498 100644
--- a/jws/algos.py
+++ b/jws/algos.py
@@ -39,7 +39,7 @@ def verify(self, msg, crypto, key):
             raise SignatureError("Could not validate signature")
         return True
 
-class RSA(HasherBase):
+class RSABase(HasherBase):
     """
     Support for RSA signing.
 
@@ -64,8 +64,9 @@ class RSA(HasherBase):
     """
     supported_bits = (256,384,512,) #:Seems to worka > 256
 
-    def __init__(self, bits):
-        super(RSA,self).__init__(bits)
+    def __init__(self, padder, bits):
+        super(RSABase,self).__init__(bits)
+        self.padder = padder
         from Crypto.Hash import SHA256,SHA384,SHA512
         self.hashm = __import__('Crypto.Hash.SHA%d'%self.bits, globals(), locals(), ['*']).new()
 
@@ -73,13 +74,12 @@ def sign(self, msg, key):
         """
         Signs a message with an RSA PrivateKey and hash method
         """
-        import Crypto.Signature.PKCS1_v1_5 as PKCS
         import Crypto.PublicKey.RSA as RSA
 
         self.hashm.update(msg)
         ## assume we are dealing with a real key
         # private_key = RSA.importKey(key)
-        return PKCS.new(key).sign(self.hashm)             # pycrypto 2.5
+        return self.padder.new(key).sign(self.hashm)             # pycrypto 2.5
 
     def verify(self, msg, crypto, key):
         """
@@ -88,17 +88,26 @@ def verify(self, msg, crypto, key):
         ``crypto`` is the cryptographic signature
         ``key`` is the verifying key. Can be a real key object or a string.
         """
-        import Crypto.Signature.PKCS1_v1_5 as PKCS
         import Crypto.PublicKey.RSA as RSA
 
         self.hashm.update(msg)
         private_key = key
         if not isinstance(key, RSA._RSAobj):
             private_key = RSA.importKey(key)
-        if not PKCS.new( private_key ).verify(self.hashm,  crypto):  #:pycrypto 2.5
+        if not self.padder.new( private_key ).verify(self.hashm,  crypto):  #:pycrypto 2.5
             raise SignatureError("Could not validate signature")
         return True
 
+class RSA_PKCS1_5(RSABase):
+    def __init__(self, bits):
+        import Crypto.Signature.PKCS1_v1_5 as PKCS
+        super(RSA_PKCS1_5,self).__init__(PKCS, bits)
+
+class RSA_PSS(RSABase):
+    def __init__(self, bits):
+        import Crypto.Signature.PKCS1_PSS as PSS
+        super(RSA_PSS,self).__init__(PSS, bits)
+
 class ECDSA(HasherBase):
     """
     Support for ECDSA signing. This is the preferred algorithm for private/public key
@@ -178,7 +187,8 @@ def resolve(endpoint, match):
 
 DEFAULT = (
     (r'^HS(?P<bits>256|384|512)$', HMAC),
-    (r'^RS(?P<bits>256|384|512)$', RSA),
+    (r'^RS(?P<bits>256|384|512)$', RSA_PKCS1_5),
+    (r'^PS(?P<bits>256|384|512)$', RSA_PSS),
     (r'^ES(?P<bits>256|384|512)$', ECDSA),
 )
 CUSTOM = []
diff --git a/jws/tests.py b/jws/tests.py
index 22e96ba..32dc4b9 100644
--- a/jws/tests.py
+++ b/jws/tests.py
@@ -6,9 +6,10 @@
 
 class TestJWS_helpers(unittest.TestCase):
     def test_default_algorithm_finding(self):
-        names = [('ES256', jws.algos.ECDSA), ('ES384', jws.algos.ECDSA), ('ES512', jws.algos.ECDSA),
-                 ('RS256', jws.algos.RSA),   ('RS384', jws.algos.RSA),   ('RS512', jws.algos.RSA),
-                 ('HS256', jws.algos.HMAC),  ('HS384', jws.algos.HMAC),  ('HS512', jws.algos.HMAC)]
+        names = [('ES256', jws.algos.ECDSA),       ('ES384', jws.algos.ECDSA),       ('ES512', jws.algos.ECDSA),
+                 ('RS256', jws.algos.RSA_PKCS1_5), ('RS384', jws.algos.RSA_PKCS1_5), ('RS512', jws.algos.RSA_PKCS1_5),
+                 ('PS256', jws.algos.RSA_PSS),     ('PS384', jws.algos.RSA_PSS),     ('PS512', jws.algos.RSA_PSS),
+                 ('HS256', jws.algos.HMAC),        ('HS384', jws.algos.HMAC),        ('HS512', jws.algos.HMAC)]
                 
         map(lambda (name, fn): self.assertIn(fn, jws.algos.find(name)), names)
     
@@ -138,30 +139,51 @@ def test_invalid_hmac(self):
         self.assertRaises(jws.SignatureError(header, self.payload, sig, 'failwhale'))
 
 class TestJWS_rsa(unittest.TestCase):
-    private = rsa.generate(1024)
+    private = rsa.generate(2048)
     def setUp(self):
         self.payload = {
             'whine': {'luke': 'But I was going into Tosche station to pick up some power converters!'},
             'rebuttal': {'owen': "You can waste time with your friends when you're done with your chores."},
         }
         
-    def test_valid_rsa256(self):
+    def test_valid_rsa256_pkcs1_5(self):
         header = {'alg': 'RS256'}
         sig = jws.sign(header, self.payload, self.private)
         public = self.private.publickey()
         self.assertTrue(len(sig) > 0)
         self.assertTrue(jws.verify(header, self.payload, sig, public))
 
-    def test_valid_rsa384(self):
+    def test_valid_rsa384_pkcs1_5(self):
         header = {'alg': 'RS384'}
         sig = jws.sign(header, self.payload, self.private)
         public = self.private.publickey()
         self.assertTrue(len(sig) > 0)
         self.assertTrue(jws.verify(header, self.payload, sig, public))
 
-    def test_valid_rsa512(self):
+    def test_valid_rsa512_pkcs1_5(self):
         header = {'alg': 'RS512'}
         sig = jws.sign(header, self.payload, self.private)
         public = self.private.publickey()
         self.assertTrue(len(sig) > 0)
         self.assertTrue(jws.verify(header, self.payload, sig, public))
+
+    def test_valid_rsa256_pss(self):
+        header = {'alg': 'PS256'}
+        sig = jws.sign(header, self.payload, self.private)
+        public = self.private.publickey()
+        self.assertTrue(len(sig) > 0)
+        self.assertTrue(jws.verify(header, self.payload, sig, public))
+
+    def test_valid_rsa384_pss(self):
+        header = {'alg': 'PS384'}
+        sig = jws.sign(header, self.payload, self.private)
+        public = self.private.publickey()
+        self.assertTrue(len(sig) > 0)
+        self.assertTrue(jws.verify(header, self.payload, sig, public))
+
+    def test_valid_rsa512_pss(self):
+        header = {'alg': 'PS512'}
+        sig = jws.sign(header, self.payload, self.private)
+        public = self.private.publickey()
+        self.assertTrue(len(sig) > 0)
+        self.assertTrue(jws.verify(header, self.payload, sig, public))
-- 
1.8.1.6
